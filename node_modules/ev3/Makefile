# This file is auto-generated by nodemake@0.3.2

.PHONY: help checkrepo checkversion install lint subtrees test publish selftest

PKG_FN      = $(shell node -e "process.stdout.write((function (pkg) { pkg.nodemake = pkg.nodemake || {}; "$(1)" }(require('./package.json'))));")
PROPERTY_FN = $(call PKG_FN,"return (pkg.nodemake.$(1) && pkg.nodemake.$(1).$(2)) ? '' + pkg.nodemake.$(1).$(2) : '$(3)';")

NAME    := $(call PKG_FN,"return pkg.name || 'null';")
VERSION := $(call PKG_FN,"return pkg.version || 'null';")

# help #########################################################################

help:
	@echo 'make help        - Print usage information'
	@echo 'make install     - Install npm dependencies'
	@echo 'make lint        - Lint sources'
	@echo 'make subtrees    - Add/Update all subtrees'
	@echo 'make test        - Run tests'
	@echo 'make publish     - Publish this package to the npm registry'
	@echo 'make selftest    - List all properties and property values'

# checkrepo ####################################################################

checkrepo:
	@if test 0 -eq `git status | grep "^# On branch master" | wc -l` ; then \
		echo "Please check out master first." >&2 ; \
		exit 1 ; \
	fi

	@if test 0 -ne `git status --porcelain | wc -l` ; then \
		echo "Unclean working tree. Commit or stash changes first." >&2 ; \
		exit 1 ; \
	fi

	@if test 0 -ne `git fetch ; git status | grep "^# Your branch" | wc -l` ; then \
		echo "Local/Remote history differs. Please push/pull changes." >&2 ; \
		exit 1 ; \
	fi

# checkversion #################################################################

checkversion:
	@if test 0 -ne `git tag -l $(VERSION) | wc -l` ; then \
		echo "The tag $(VERSION) already exists. Please update the package.json file." >&2 ; \
		exit 1 ; \
	fi

# install ######################################################################

LOGLEVEL := $(call PROPERTY_FN,install,loglevel,error)

install:
	@npm --loglevel "$(LOGLEVEL)" install

# lint #########################################################################

ARGS   := $(call PROPERTY_FN,lint,args,.)
LINTER := $(call PROPERTY_FN,lint,linter,node_modules/.bin/jshint)

lint: install
	@"$(LINTER)" $(ARGS)

# subtrees #####################################################################

DELIMITER       := !!!DELIMITER!!!
SPACE           := !!!SPACE!!!
SUBTREE_FN_NAME := SUBTREE_FN

PKG_SUBTREES := $(call PKG_FN,"return (function () { \
	return (pkg.nodemake.subtrees || []).map(function (subtree) { \
		return [ \
			subtree.prefix || 'null', \
			subtree.repository || 'null', \
			subtree.refspec || 'master' \
		].map(function (value) { \
			return value.replace(' ', '"$(SPACE)"'); \
		}).join('"$(DELIMITER)"'); \
	}).join(' '); \
}());")

SUBTREE_FN = if [ -z $(wildcard $(1)) ] ; \
	then \
	    git subtree add \
	    	--message="Added '$(1)'" \
	    	--prefix="$(1)" \
	    	--squash "$(2)" "$(3)" ; \
	else \
	    git subtree pull \
	    	--message="Updated '$(1)'" \
	    	--prefix="$(1)" \
	    	--squash "$(2)" "$(3)" ; \
	fi ;

SPLIT_SUBTREE_FN   = $(call $(SUBTREE_FN_NAME),$(subst $(SPACE), ,$(word 1,$(1))),$(subst $(SPACE), ,$(word 2,$(1))),$(subst $(SPACE), ,$(word 3,$(1))))
FOREACH_SUBTREE_FN = $(foreach SUBTREE,$(PKG_SUBTREES),$(call SPLIT_SUBTREE_FN,$(subst $(DELIMITER), ,$(SUBTREE))))

subtrees: checkrepo
	@$(FOREACH_SUBTREE_FN)

# test #########################################################################

MOCHA    := $(call PROPERTY_FN,test,mocha,node_modules/.bin/mocha)
REPORTER := $(call PROPERTY_FN,test,reporter,spec)
UI       := $(call PROPERTY_FN,test,ui,tdd)

test: install
	@NODE_ENV=test "$(MOCHA)" --reporter "$(REPORTER)" --ui "$(UI)" test/*.test.js

# publish ######################################################################

BROWSER    := $(call PROPERTY_FN,publish,browser,false)
BROWSERIFY := $(call PROPERTY_FN,publish,browserify,node_modules/.bin/browserify)
UGLIFYJS   := $(call PROPERTY_FN,publish,uglifyjs,node_modules/.bin/uglifyjs)
USERNAME   := $(call PROPERTY_FN,publish,username,null)

publish: lint test checkrepo checkversion

ifeq ($(BROWSER),true)
	@rm -rf browser
	@mkdir -p browser
	@$(BROWSERIFY) index.js --standalone=$(NAME) | $(UGLIFYJS) > browser/$(NAME)-$(VERSION).min.js

	@git add -A
	@git commit -m 'Updated browser/$(NAME)-$(VERSION).min.js'
	@git push origin master
endif

	@git tag -a $(VERSION) -m 'Release $(VERSION)'
	@git push origin $(VERSION)
	@npm publish https://github.com/$(USERNAME)/$(NAME)/tarball/$(VERSION)

# selftest #####################################################################

SUBTREE_TEST_FN = echo "\"subtree\": {\n    \"prefix\": \"$(1)\",\n    \"repository\": \"$(2)\",\n    \"refspec\": \"$(3)\"\n}\n" ;

selftest: SUBTREE_FN_NAME := SUBTREE_TEST_FN

selftest:
	@echo "\"name\": \"$(NAME)\"\n"
	@echo "\"version\": \"$(VERSION)\"\n"
	@echo "\"install\": {\n    \"loglevel\": \"$(LOGLEVEL)\"\n}\n"
	@echo "\"lint\": {\n    \"args\": \"$(ARGS)\",\n    \"linter\": \"$(LINTER)\"\n}\n"
	@$(FOREACH_SUBTREE_FN)
	@echo "\"test\": {\n    \"mocha\": \"$(MOCHA)\",\n    \"reporter\": \"$(REPORTER)\",\n    \"ui\": \"$(UI)\"\n}\n"
	@echo "\"publish\": {\n    \"browser\": $(BROWSER),\n    \"browserify\": \"$(BROWSERIFY)\",\n    \"uglifyjs\": \"$(UGLIFYJS)\",\n    \"username\": \"$(USERNAME)\"\n}\n"
